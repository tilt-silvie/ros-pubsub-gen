#!/usr/bin/env python

import yaml
import click
import textwrap
import datetime
from pathlib import Path
from collections import OrderedDict


@click.command()
@click.argument('yaml_path')
@click.argument('generation_type', type=click.Choice(['python', 'markdown']))
@click.option('--indent', type=int, default=4, help='Number of spaces for indent. Default is 4.')
def cmd(yaml_path, generation_type, indent):

    with Path(yaml_path).open() as f:
        data = yaml.load(f)

    if generation_type == 'python':
        generate_python(data, indent)
    elif generation_type == 'markdown':
        generate_markdown(data, indent)


def generate_python(settings, num_of_indent):
    FILE_HEADER = '''\
#!/usr/bin/env python

# This code was generated by ros-pubsub-gen
# https://github.com/tilt-silvie/ros-pubsub-gen
#
# DO NOT modify this file.

import rospy\
'''

    PUBLISHERS_HEADER = '# publishers'
    SUBSCRIBERS_DEFINITION_HEADER = '# subscribers (definition only. Instantiation is in init().)'
    FUNC_INIT_HEADER = 'def init(callbacks):'

    # derive import lines
    message_types = []
    for k, v in settings['publishers'].items():
        message_types.append(v['topic_type'])
    for k, v in settings['subscribers'].items():
        message_types.append(v['topic_type'])
    import_lines = gen_python_imports(message_types)

    # derive publishers lines
    publishers_lines_ary = []
    for k, v in settings['publishers'].items():
        publishers_lines_ary.append(gen_python_publisher(
            k, v['topic_name'], v['topic_type'], v['description']))
    publishers_lines = '\n'.join(publishers_lines_ary)

    # derive subscribers lines
    subscribers_definition_lines_ary = []
    subscribers_instantiation_lines_ary = []
    for k, v in settings['subscribers'].items():
        subscribers_definition_lines_ary.append(
            gen_python_subscriber_definition(k, v['description']))
        subscribers_instantiation_lines_ary.append(gen_python_subscriber_instantiation(
            k, v['topic_name'], v['topic_type'], v['description']))
    subscribers_definition_lines = '\n'.join(subscribers_definition_lines_ary)
    subscribers_instantiation_lines = '\n'.join(
        subscribers_instantiation_lines_ary)

    # derive global variable lines
    subscribes_name_list = settings['subscribers'].keys()
    global_variable_lines = 'global ' + ', '.join(subscribes_name_list)

    # generate entire codes
    output_list = [
        FILE_HEADER,
        import_lines,
        '',
        PUBLISHERS_HEADER,
        publishers_lines,
        '',
        SUBSCRIBERS_DEFINITION_HEADER,
        subscribers_definition_lines,
        '\n',
        FUNC_INIT_HEADER,
        textwrap.indent(global_variable_lines, ' ' * num_of_indent),
        textwrap.indent(subscribers_instantiation_lines, ' ' * num_of_indent),
    ]
    output_str = '\n'.join(output_list)

    print(output_str)


def gen_python_imports(msg_type_full_list):
    # remove dupulicated msg_types
    msg_type_full_list_unique = list(set(msg_type_full_list))

    import_lines = ['from ' + x.split('/')[0] + '.msg import ' + x.split('/')[1]
                    for x in msg_type_full_list_unique]

    return '\n'.join(import_lines)


def gen_python_publisher(name, topic, msg_type_full, description):
    [msg_package, msg_type] = msg_type_full.split('/')

    comment = '# ' + name + ': ' + description
    main_line = name + \
        ' = rospy.Publisher(\'' + topic + '\', ' + \
        msg_type + ', queue_size=10)'

    return '\n'.join([comment, main_line])


def gen_python_subscriber_definition(name, description):
    comment = '# ' + name + ': ' + description
    definition = name + ' = None'
    return '\n'.join([comment, definition])


def gen_python_subscriber_instantiation(name, topic, msg_type_full, description):
    [msg_package, msg_type] = msg_type_full.split('/')
    instantiation = name + \
        ' = rospy.Subscriber(\'' + topic + '\', ' + \
        msg_type + ', callbacks[\'' + name + '\'])'
    return instantiation


def generate_markdown(settings, num_of_indent):
    PUBLISHER_HEADER = '## Published topics'
    SUBSCRIBER_HEADER= '## Subscribed topics'
    
    publisher_lines = ""
    for k,v in settings['publishers'].items():
        publisher_lines += '- ' + v['topic_name'] + ' (' + v['topic_type'] + ')\n'
        publisher_lines += textwrap.indent(v['description'], ' ' * num_of_indent)
        publisher_lines += "\n"

    subscriber_lines = ""
    for k,v in settings['subscribers'].items():
        subscriber_lines += '- ' + v['topic_name'] + ' (' + v['topic_type'] + ')\n'
        subscriber_lines += textwrap.indent(v['description'], ' ' * num_of_indent)
        subscriber_lines += "\n"

    output_list = [
        PUBLISHER_HEADER,
        publisher_lines,
        SUBSCRIBER_HEADER,
        subscriber_lines,
        ]

    output_str = "\n".join(output_list)
    print(output_str)



def main():
    # to keep settings order when load yaml file
    yaml.add_constructor(yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG,
                         lambda loader, node: OrderedDict(loader.construct_pairs(node)))

    cmd()


if __name__ == '__main__':
    main()
